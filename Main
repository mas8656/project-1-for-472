#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <pthread.h>
#include <unistd.h>
#include <sys/wait.h>

#define NUM_THREADS 4
#define BUFFER_SIZE 1024

typedef struct {
    char* filename;
    char* word;
    int word_count;
    long start;
    long end;
} ThreadData;

void* count_words(void* arg) {
    ThreadData* data = (ThreadData*)arg;

    // Debug print to check which file is being processed
    printf("Attempting to open file: '%s'\n", data->filename);
    FILE* file = fopen(data->filename, "r");
    if (!file) {
        perror("Failed to open file");
        pthread_exit(NULL);
    }

    fseek(file, data->start, SEEK_SET);
    char buffer[BUFFER_SIZE];
    int count = 0;
    long current_pos = data->start;

    while (current_pos < data->end && fscanf(file, "%1023s", buffer) == 1) {
        if (strcmp(buffer, data->word) == 0) {
            count++;
        }
        current_pos = ftell(file);
    }
    fclose(file);
    data->word_count = count;
    pthread_exit(NULL);
}

int main(int argc, char* argv[]) {
    if (argc < 3) {
        fprintf(stderr, "Usage: %s <word> <file1> <file2> ... <fileN>\n", argv[0]);
        return 1;
    }

    char* word = argv[1];
    int num_files = argc - 2;

    for (int i = 0; i < num_files; i++) {
        pid_t pid = fork();
        if (pid == -1) {
            perror("Fork failed");
            return 1;
        }

        if (pid == 0) { // Child process
            printf("Processing file: %s\n", argv[i + 2]);
            ThreadData thread_data[NUM_THREADS];
            pthread_t threads[NUM_THREADS];

            // Open the file to determine its size
            FILE* file = fopen(argv[i + 2], "r");
            if (!file) {
                perror("Failed to open file");
                exit(1);
            }

            fseek(file, 0, SEEK_END);
            long file_size = ftell(file);
            fclose(file);

            // Divide the file size into parts for each thread
            long chunk_size = file_size / NUM_THREADS;

            for (int j = 0; j < NUM_THREADS; j++) {
                thread_data[j].filename = argv[i + 2];
                thread_data[j].word = word;
                thread_data[j].start = j * chunk_size;
                thread_data[j].end = (j == NUM_THREADS - 1) ? file_size : (j + 1) * chunk_size;
                thread_data[j].word_count = 0;
                pthread_create(&threads[j], NULL, count_words, (void*)&thread_data[j]);
            }

            int total_count = 0;
            for (int j = 0; j < NUM_THREADS; j++) {
                pthread_join(threads[j], NULL);
                total_count += thread_data[j].word_count;
            }

            printf("Word count for '%s' in '%s': %d\n", word, argv[i + 2], total_count);
            exit(0);
        }
    }

    for (int i = 0; i < num_files; i++) {
        wait(NULL); // Parent waits for all child processes to finish
    }

    return 0;
}

    return 0;
}
